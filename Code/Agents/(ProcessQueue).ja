<?xml version="1.0" encoding="UTF-8"?>
<agent xmlns="http://www.lotus.com/dxl" name="(ProcessQueue)" hide="v3" publicaccess="false" restrictions="unrestricted">
  <trigger type="agentlist"/>
  <documentset type="selected"/>
  <code event="action">
    <javaproject class="JavaAgent.class">
      <java name="JavaAgent.java">import java.io.NotSerializableException;
import CommonUtil.*;
import lotus.domino.*;

public class JavaAgent extends AgentBase {

    public void NotesMain() {

      try {
          Session session = getSession();
          AgentContext agentContext = session.getAgentContext();

          // (Your code goes here)
          //singleDelete();
          GUIprompt gui = new GUIprompt();
          if (gui.promptWindow("Are you sure you want to DELETE databases from server?"))
        	  processRequests();
          else
        	  System.out.println("Operation canceled");
          //processSingleServerRequests();
         //testProcess();
          
          //readProfile();
      }
      catch(NotesException ne)
      {
    	  ne.printStackTrace();
      }
      catch(Exception e) {
          e.printStackTrace();
       }
   }
    
    /*
     * TEST one single deletion
     */
    public void singleDelete() throws NotesException
    {
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database db = agt.getCurrentDatabase();
    	View view = db.getView("RequestQueue");
    	
    	String mail01srv = "SVEHMAIL01/SRV/EPCOS";
    	String mail02srv = "SVEHMAIL02/SRV/EPCOS";
    	
    	Document docTmp = null;
    	Document doc = view.getFirstDocument();
    	
    	Database dbMail01 = s.getDatabase(mail01srv, doc.getItemValueString("reqMail01"), false);
    	Database dbMail02 = s.getDatabase(mail02srv, doc.getItemValueString("reqMail02"), false);
    	
    	System.out.println(doc.getItemValueString("reqFullName"));
    	dbMail01.remove();
    	dbMail02.remove();
    	
    	dbMail01.recycle();
    	dbMail02.recycle();
    	
    	doc.recycle();
    }
    
    /*
     * TEST method for reading database's profile document
     */
    public Document readProfile() throws NotesException
    {
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database db = agt.getCurrentDatabase();
    	
    	Document profileDoc = db.getProfileDocument("Configuration", "");
    	if (profileDoc.isProfile())
    	{
//    		System.out.println("Delete from server: " + profileDoc.getItemValueString("deleteFromServer"));
//    		System.out.println("Selected cluster1? " + profileDoc.getItemValueString("cluster1delete"));
//    		System.out.println("Selected cluster1? " + profileDoc.getItemValueString("prefix"));
//    		int deleteCluster1 = Integer.parseInt(profileDoc.getItemValueString("cluster1delete"));
//    		if (deleteCluster1 == 1)
//    			System.out.println("jeden");
    		return profileDoc;
    	}
    	
    	else
    		return null;
    	
    }
    
    
    /*
     * Method check all requests document. it check if doc is in QUEUE state and if it is not selected to NOT PROCESS
     * TODO: add to window prompt info about parameter from profile
     */
    
    public void processRequests() throws NotesException
    {
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database db = agt.getCurrentDatabase();
    	//View view = db.getView("RequestQueue");
    	DocumentCollection view = agt.getUnprocessedDocuments();
    	Document profileDoc = db.getProfileDocument("Configuration", "");
    	/*
    	 * VERY IMPORTANT!
    	 * setAutoUpdate = false
    	 * When TRUE then view updates on every iteration and reference to Document is missing.
    	 * Agent interrupt its executing with error: NullPoinerException, in line getNextDocument(doc)
    	 */
    	//view.setAutoUpdate(false);

    	String clusterSrv01 = profileDoc.getItemValueString("serverReplica1");
    	String clusterSrv02 = profileDoc.getItemValueString("serverReplica2");
    	String singleServer = profileDoc.getItemValueString("deleteFromServer");

    	// Reads the states of checkboxes: 0 or 1
  //  	int deleteCluster1 = Integer.parseInt(profileDoc.getItemValueString("cluster1delete"));
    //	int deleteCluster2 = Integer.parseInt(profileDoc.getItemValueString("cluster2delete"));
    	int deleteSingleServer = Integer.parseInt(profileDoc.getItemValueString("singleServerDelete"));
    	
    	Document docTmp = null;
    	Document doc = view.getFirstDocument();
    	
    	String reqStatus = "";
    	String fileMail01 = "";
    	String fileMail02 = "";
    	String singleMail = "";
    	Database dbMail01 = null;
    	Database dbMail02 = null;
    	Database dbSingle = null;
    		
    	
    	System.out.println("START");
    	if (deleteSingleServer == 1)
    	{
    		// Delete from non-cluster. Single server
    		while (doc!=null)
    		{
    			reqStatus = doc.getItemValueString("reqStatus");
    			singleMail = doc.getItemValueString("mailPath");
    			
	    		if ((reqStatus.contains("Queue")))
	    		{
	    			// request will be process...
	    			if (!singleMail.isEmpty())
	    			{
	    				System.out.println(singleMail);
	    				dbSingle = s.getDatabase(singleServer, singleMail, false);
	    				if (dbSingle == null)
	    				{
	    					System.out.println("File does not exist!");
	    					doc.replaceItemValue("reqStatus", "NOEXIST");
	    				}
	    				else
	    				{	    				
		    				try
		    				{
		    					dbSingle.remove();	   
		    					doc.replaceItemValue("reqStatus", "DONE");
		    					System.out.println("Mailbox, deleted " + doc.getItemValueString("mailPath"));	
		    				}
		    				catch(NotesException ne)
		    				{	    					
		    					System.out.println("Cannot delete!");
		    					doc.replaceItemValue("reqStatus", "ERROR");
		    					System.out.println("Mailbox, NOT deleted " + doc.getItemValueString("mailPath"));	
		    				}
		    				
		    				dbSingle.recycle();		    				    						    			
	    				}
	    				doc.computeWithForm(false, false);
	    				doc.save();
	    			}	    			
	    		}
    			docTmp = view.getNextDocument(doc);
    			doc.recycle();
    			doc = docTmp;
    		}
    		System.out.println("END");
    	}
    	else
    	{
    		// Delete from cluster servers.
	    	while (doc!=null)
	    	{
	    		reqStatus = doc.getItemValueString("reqStatus");
	    		fileMail01 = doc.getItemValueString("reqMail01");
	    		fileMail02 = doc.getItemValueString("reqMail02");
	    			    		
	    		if ((reqStatus.contains("Queue")))
	    		{
	    			// request will be process...
	    			
	    			if (!fileMail01.isEmpty())
	    			{
	    				// file exist on server M1
	    				dbMail01 =  s.getDatabase(clusterSrv01, fileMail01, false);
	    				try
	    				{
	    					dbMail01.remove();
	    				}
	    				catch(NotesException ne)
	    				{
	    					System.out.println("Cant delete!");
	    					doc.replaceItemValue("reqProcess", "NO");
	    				}
	    				
						dbMail01.recycle();
						System.out.println("M1, deleted " + doc.getItemValueString("reqEGID"));

						
	    				if (!fileMail02.isEmpty())
	    				{
	    					// file exist on M2
	    					dbMail02 =  s.getDatabase(clusterSrv02, fileMail02, false);
	    					try
	    					{
	    						dbMail02.remove();
	    					}
	    					catch(NotesException ne2)
	    					{
	    						System.out.println("Can't delete!");
	    						doc.replaceItemValue("reqProcess", "NO");
	    					}
	    					dbMail02.recycle();
	    					System.out.println("M2, deleted " + doc.getItemValueString("reqEGID"));
	    				}
	    				
	    				doc.replaceItemValue("reqStatus", "DONE");
	    				doc.computeWithForm(false, false);
	    				doc.save();
	    			}	
	    		}

	    		docTmp = view.getNextDocument(doc);
	    		doc.recycle();
	    		doc = docTmp;
	    	}
	    	System.out.println("END");
    	}
    }
    
    
    public void processSingleServerRequests() throws NotesException
    {
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database db = agt.getCurrentDatabase();
    	View view = db.getView("RequestQueue");
    	Document profileDoc = db.getProfileDocument("Configuration", "");
    	
    	view.setAutoUpdate(false);
    	
    	String singleServer = profileDoc.getItemValueString("deleteFromServer");
    	String prefix = profileDoc.getItemValueString("prefix");
    	
    	// Reads the states of checkboxes: 0 or 1
    	//int deleteCluster1 = Integer.parseInt(profileDoc.getItemValueString("cluster1delete"));
   
    	String reqStatus = "";
    	String filePath = "";
    	Database dbMail = null;
    	Document docTmp = null;
    	Document doc = view.getFirstDocument();
    	
    	System.out.println("START");

	    	while (doc!=null)
	    	{	    		
	    		reqStatus = doc.getItemValueString("reqStatus");
	    		filePath = prefix.concat(doc.getItemValueString("reqEGID")).concat(".nsf");	    	   
	    		
	    		if ((reqStatus.contains("Queue")))
	    		{
	    			// request will be process...
	    			dbMail =  s.getDatabase(singleServer, filePath, false);
    				try
    				{
    					dbMail.remove();
    				}
    				catch(NotesException ne)
    				{
    					System.out.println("Cant delete!");
    					doc.replaceItemValue("reqProcess", "NO");
    				}
    				
					dbMail.recycle();
					System.out.println("DB deleted: " + doc.getItemValueString("reqEGID"));
	
    				doc.replaceItemValue("reqStatus", "DONE");
    				doc.computeWithForm(false, false);
    				doc.save();
	    			}

	    		docTmp = view.getNextDocument(doc);
	    		doc.recycle();
	    		doc = docTmp;
	    	}
	    	System.out.println("END");
    	
    }
    
    
    public void testProcess() throws NotesException
    {
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database db = agt.getCurrentDatabase();
    	View view = db.getView("RequestQueue");
    	
    	String mail01srv = "SVEHMAIL01/SRV/EPCOS";
    	String mail02srv = "SVEHMAIL02/SRV/EPCOS";
    	
    	Document docTmp = null;
    	Document doc = view.getFirstDocument();
    	
    	String reqStatus = "";
    	String reqStatusOption ="";
    	String fileMail01 = "";
    	String fileMail02 = "";
    	Database dbMail01 = null;
    	Database dbMail02 = null;
    	
    	System.out.println("START");
    	view.setAutoUpdate(false);
    	while (doc!=null)
    	{
    		
    		doc.replaceItemValue("reqProcess","Queue");
    		if (doc.save())
    			System.out.println("SAVED: " + doc.getItemValueString("reqEGID"));
    		else
    			System.out.println("Cant SAVED: " + doc.getItemValueString("reqEGID"));
    		doc.computeWithForm(true, true);
    		
    		docTmp = view.getNextDocument(doc);
    		doc.recycle();
    		doc = docTmp;
    	}
    	System.out.println("END");
    }
}</java>
      <sharedlibraryref name="CommonUtility"/>
    </javaproject>
  </code>
  <item name="$JavaCompilerSource">
    <text>1.3</text>
  </item>
  <item name="$JavaCompilerTarget">
    <text>1.2</text>
  </item>
</agent>