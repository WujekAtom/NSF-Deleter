<?xml version="1.0" encoding="UTF-8"?>
<agent xmlns="http://www.lotus.com/dxl" name="CreateRequestsForDelete" hide="v3" publicaccess="false" restrictions="unrestricted">
  <trigger type="actionsmenu"/>
  <documentset type="runonce"/>
  <code event="action">
    <javaproject class="JavaAgent.class">
      <java name="JavaAgent.java">import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;

import lotus.domino.*;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import CommonUtil.*;


public class JavaAgent extends AgentBase {

	//public ThreadLocal sessThread = new ThreadLocal();
   
	public void NotesMain() {

      try {

          Session session = getSession();
          AgentContext agentContext = session.getAgentContext();

          // (Your code goes here)
          GUIprompt gui = new GUIprompt();
          
          ReadProfileDocument pr = new ReadProfileDocument(session);
          Document profile = pr.getProfileDocument();
          String srv = profile.getItemValueString("NABserver");
          if (srv.isEmpty())
        	  gui.promptWindow("Names server is EMPTY! Please fulfill the COONFIGURATION!");
          else
          {
        	  String s = inputGUI();
              if ((s!=null) &amp;&amp; (!s.isEmpty()))
            	  searchInNAB(s);
              else
              {
            	  System.out.println("You didn't provide key to search!");
            	  gui.outputGUI("You didn't provide key to search!");
              }
          }
      }
      catch(NotesException ne)
      {
    	  ne.printStackTrace();
      }
      catch(Exception e) {
          e.printStackTrace();
       }
     
   }
    
	/*
	 * Method is creating document in current database.
	 */
    public void createRequest(Document personDoc) throws NotesException
    {
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database dbCurr = agt.getCurrentDatabase();
    	String srv = dbCurr.getServer();	//Server name where this app is
    	
    	
    	Document doc = dbCurr.createDocument();
    	
    	//Mapping fields from PersonDoc to Request
    	
    	doc.appendItemValue("Form", "Request");
    	doc.appendItemValue("reqStatus", "Queue");
    	
    	doc.appendItemValue("reqDep", personDoc.getItemValueString("OfficeCountry"));
    	doc.appendItemValue("reqEGID", personDoc.getItemValueString("EmployeeID"));
    	doc.appendItemValue("reqFullName", personDoc.getItemValueString("FullName"));
    	doc.appendItemValue("reqMailServer", personDoc.getItemValueString("MailServer"));
    	doc.appendItemValue("mailPath", personDoc.getItemValueString("MailFile"));
    	
    	doc.appendItemValue("reqMail01", "");
    	doc.appendItemValue("reqMail02", "");
    	doc.appendItemValue("reqProcess", "");    	
    	
    	doc.computeWithForm(false, false);
    	
    	if (!doc.save())
    		System.out.println("CAN'T SAVE: " + personDoc.getItemValueString("FullName"));
    	else
    		System.out.println("SAVED: " + personDoc.getItemValueString("FullName"));

    }
    
    public void searchInNAB(String keyword) throws NotesException
    {
    	
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database dbCurr = agt.getCurrentDatabase();
    	String srv = dbCurr.getServer();	//Server name where this app is
    	View requestsView = dbCurr.getView("RequestQueue");
    	
    	ReadProfileDocument pr = new ReadProfileDocument(s);
    	Document profile = pr.getProfileDocument();
    	
    	String nabServer = profile.getItemValueString("NABserver");
    	
    	System.out.println(nabServer);

    	Document doc = null;
    	Document docTmp = null;
    	Database dbNAB = s.getDatabase(nabServer, "names.nsf");
    	System.out.println(dbNAB.getFileName());
    	View vPeople = dbNAB.getView("People");
    	
    	
    	// Full text search in the view. If finds something then returns the number of found elements.
    	// vPeople view is modified and contains only results of full text searching.
    	// To restore default value of vPeople (all entries) use vPeople.clear()
    	int resultsFoundInNAB = vPeople.FTSearch(keyword);    	
    	System.out.println(resultsFoundInNAB);
    	
    	if (resultsFoundInNAB!=0)
    	{    		
    		doc = vPeople.getFirstDocument();
    		while (doc!=null)
    		{
    			createRequest(doc);
    			    		
    			docTmp = vPeople.getNextDocument(doc);
    			doc.recycle();
    			doc = docTmp;
    		}
    		
    		// Reset the search query, vPeople will "shows" all elements
    		vPeople.clear();
    		requestsView.refresh();
    	}
    	
    	System.out.println("END");
    }
    
    /*
     * Shows the prompt window. Provided value will be search in the view and all documents containg this value will be return
     * and for each value will be create request in this database.
     */
    public String inputGUI()
    {
    	String s = JOptionPane.showInputDialog("Provide common value to search in Domino Directory and create requests for found elements: ");
    	return s;
    }
    
    /*
     * Only for showing the user prompt that he didn't provide any value to search.
     * Not evryone looks at the Java Debug Console. 
     */

}









</java>
      <sharedlibraryref name="CommonUtility"/>
    </javaproject>
  </code>
  <item name="$JavaCompilerSource">
    <text>1.3</text>
  </item>
  <item name="$JavaCompilerTarget">
    <text>1.2</text>
  </item>
</agent>