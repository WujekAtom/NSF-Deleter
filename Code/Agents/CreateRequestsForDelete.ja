<?xml version='1.0' encoding='utf-8'?>
<agent name='CreateRequestsForDelete' xmlns='http://www.lotus.com/dxl' version='9.0'
 maintenanceversion='1.10' replicaid='C125831D007B6F4A' hide='v3' publicaccess='false'
 designerversion='8.5.3' restrictions='unrestricted'>
<noteinfo noteid='176' unid='43207142FDFD8028C12581A10044A57B' sequence='110'>
<created><datetime dst='true'>20170920T142948,11+02</datetime></created>
<modified><datetime dst='true'>20181006T002819,06+02</datetime></modified>
<revised><datetime dst='true'>20180710T122405,59+02</datetime></revised>
<lastaccessed><datetime dst='true'>20181006T002819,05+02</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20181006T002819,05+02</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Tomasz Wieszczura/OU=Poland/O=IBM</name></updatedby>
<wassignedby><name>CN=Tomasz Wieszczura/OU=Poland/O=IBM</name></wassignedby>
<designchange><datetime dst='true'>20180710T122405,94+02</datetime></designchange>
<trigger type='actionsmenu'/>
<documentset type='runonce'/><code event='action'><javaproject class='JavaAgent.class'
 codepath='c:\Notes\Data'><java name='JavaAgent.java'>import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;

import lotus.domino.*;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;



public class JavaAgent extends AgentBase {

	//public ThreadLocal sessThread = new ThreadLocal();
   
	public void NotesMain() {

      try {

          Session session = getSession();
          AgentContext agentContext = session.getAgentContext();

          // (Your code goes here)
          
          String s = inputGUI();
          if (s!=null)
        	  searchInNAB(s);
          else
          {
        	  System.out.println("You didn't provide department code!");
        	  outputGUI("You didn't provide department code!");
          }

      }
      catch(NotesException ne)
      {
    	  ne.printStackTrace();
      }
      catch(Exception e) {
          e.printStackTrace();
       }
     
   }
    
	/*
	 * Method is creating document in current database.
	 */
    public void createRequest(Document personDoc) throws NotesException
    {
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database dbCurr = agt.getCurrentDatabase();
    	String srv = dbCurr.getServer();	//Server name where this app is
    	
    	Document doc = dbCurr.createDocument();
    	
    	//Mapping fields from PersonDoc to Request
    	
    	doc.appendItemValue("Form", "Request");
    	doc.appendItemValue("reqStatus", "Queue");
    	
    	doc.appendItemValue("reqDep", personDoc.getItemValueString("OfficeCountry"));
    	doc.appendItemValue("reqEGID", personDoc.getItemValueString("EmployeeID"));
    	doc.appendItemValue("reqFullName", personDoc.getItemValueString("FullName"));
    	doc.appendItemValue("reqMailServer", personDoc.getItemValueString("MailServer"));
    	
    	doc.appendItemValue("reqMail01", "");
    	doc.appendItemValue("reqMail02", "");
    	doc.appendItemValue("reqProcess", "");    	
    	
    	doc.computeWithForm(false, false);
    	
    	if (!doc.save())
    		System.out.println("CAN'T SAVE: " + personDoc.getItemValueString("EmployeeID"));
    	else
    		System.out.println("SAVED: " + personDoc.getItemValueString("EmployeeID"));

    }
    
    public void searchInNAB(String keyword) throws NotesException
    {
    	
    	Session s = getSession();
    	AgentContext agt = s.getAgentContext();
    	Database dbCurr = agt.getCurrentDatabase();
    	String srv = dbCurr.getServer();	//Server name where this app is
    	View requestsView = dbCurr.getView("RequestQueue");
    	
    	System.out.println(srv);
    	
    	Document doc = null;
    	Document docTmp = null;
    	Database dbNAB = s.getDatabase(srv, "names.nsf");
    	System.out.println(dbNAB.getFileName());
    	View vPeople = dbNAB.getView("(PeopleByServer)");
    	
    	
    	// Full text search in the view. If finds something then returns the number of found elements.
    	// vPeople view is modified and contains only results of full text searching.
    	// To restore default value of vPeople (all entries) use vPeople.clear()
    	int resultsFoundInNAB = vPeople.FTSearch(keyword);    	
    	System.out.println(resultsFoundInNAB);
    	
    	if (resultsFoundInNAB!=0)
    	{
    		
    		doc = vPeople.getFirstDocument();
    		while (doc!=null)
    		{
    			if (doc.getItemValueString("MailServer").contains("Verse"))
    			{
    				createRequest(doc);
    			}    		
    			docTmp = vPeople.getNextDocument(doc);
    			doc.recycle();
    			doc = docTmp;
    		}
    		
    		// Reset the search query, vPeople will "shows" all elements
    		vPeople.clear();
    		requestsView.refresh();
    	}
    	
    	System.out.println("END");
    }
    
    /*
     * Shows the prompt window. Provided value will be search in the view and all documents containg this value will be return
     * and for each value will be create request in this database.
     */
    public String inputGUI()
    {
    	String s = JOptionPane.showInputDialog("Provide value to search in view and create requests for found elements: ");
    	return s;
    }
    
    /*
     * Only for showing the user prompt that he didn't provide any value to search.
     * Not evryone looks at the Java Debug Console. 
     */
    public void outputGUI(String text)
    {
    	JOptionPane.showMessageDialog(null,text);
    }
}









</java></javaproject></code>
<rundata processeddocs='0' exitcode='0'>
<agentmodified><datetime dst='true'>20180710T122405,97+02</datetime></agentmodified></rundata>
<item name='$JavaCompilerSource'><text>1.3</text></item>
<item name='$JavaCompilerTarget'><text>1.2</text></item></agent>

